{"version":3,"sources":["components/Comment.jsx","utils/constants/localStorageConst.js","utils/localStorageUtils/getLSData.js","utils/localStorageUtils/updateLSData.js","containers/Item.jsx","containers/App.js","serviceWorker.js","index.js"],"names":["comment","_ref","react_default","a","createElement","Typography_default","style","wordWrap","align","variant","component","localStorageConst","window","localStorage","getLSData","path","arguments","length","undefined","value","data","JSON","parse","getItem","find","item","updateLSData","setItem","stringify","Item","state","open","newComment","handleClick","_this","setState","handleChangeNewComment","event","target","handleAddNewComment","refreshState","props","itemId","currentTarget","dataset","Object","toConsumableArray","id","comments","push","commentId","_this$state","this","_this$props","onDeleteItem","Paper_default","className","title","IconButton_default","data-item-id","onClick","aria-label","color","Delete_default","List_default","ListItem_default","button","ListItemText_default","primary","ExpandLess_default","ExpandMore_default","Collapse_default","in","timeout","unmountOnExit","map","key","uuidv1","Comment","Divider_default","TextField_default","autoFocus","onChange","label","Fab_default","size","Add_default","React","Component","App","itemTitle","handleChangeItemTitle","handleAddItem","updatedData","concat","handleDeleteItem","filter","_this2","_this$state2","Item_Item","Boolean","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d3954437.chunk.js","sourcesContent":["import React from 'react';\nimport Typography from '@material-ui/core/Typography';\n\nconst comment = ({comment}) => (\n    <Typography\n        style={{wordWrap: 'break-word'}}\n        align=\"left\"\n        variant=\"h6\"\n        component=\"h3\"\n    >\n        {comment}\n    </Typography>\n);\n\nexport default comment;\n","export const localStorageConst = window.localStorage;\n","import {localStorageConst} from '../constants';\nimport {find} from 'lodash';\n\n/**\n * Method extracts data from local storage.\n * @param [path] {string} The specific field that is present in the target element in store's data.\n * @param [value] {string} The value for the search field.\n */\nexport const getLSData = (path = null, value = null) => {\n    const data = JSON.parse(localStorageConst.getItem('data'));\n    if (data && path && value) {\n        return find(data, item => item[path] === value);\n    } else if (data && !path && !value) {\n        return data;\n    }\n};\n","import {localStorageConst} from '../constants';\n\n/**\n * Method adds data to local storage.\n * @param data {object | string | number} Data to be added to the local storage.\n */\nexport const updateLSData = data => {\n    return localStorageConst.setItem('data', JSON.stringify(data));\n};\n","import React from 'react';\nimport {find, map} from 'lodash';\nimport uuidv1 from 'uuid/v1';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport Comment from '../components/Comment';\nimport Collapse from '@material-ui/core/Collapse';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport TextField from '@material-ui/core/TextField';\nimport Fab from '@material-ui/core/Fab';\nimport Divider from '@material-ui/core/Divider';\nimport AddIcon from '@material-ui/icons/Add';\nimport IconButton from '@material-ui/core/IconButton';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport {updateLSData, getLSData} from '../utils';\nimport './Item.css';\n\nexport default class Item extends React.Component {\n    state = {\n        open: false,\n        newComment: ''\n    };\n\n    handleClick = () => {\n        this.setState(state => ({open: !state.open, newComment: ''}));\n    };\n\n    handleChangeNewComment = event => {\n        const {\n            target: {value}\n        } = event;\n        this.setState({newComment: value});\n    };\n\n    handleAddNewComment = event => {\n        const {newComment} = this.state;\n        const {refreshState} = this.props;\n        const {\n            currentTarget: {\n                dataset: {itemId}\n            }\n        } = event;\n        if (newComment) {\n            const data = [...getLSData()];\n            const targetObj = find(data, item => item.id === itemId);\n            targetObj.comments.push(newComment);\n            updateLSData(data);\n            this.setState({newComment: '', commentId: null}, () =>\n                refreshState()\n            );\n        }\n    };\n\n    render() {\n        const {open, newComment} = this.state;\n        const {item, onDeleteItem} = this.props;\n        return (\n            <Paper className=\"item-container\">\n                <Typography\n                    className=\"title-container\"\n                    align=\"center\"\n                    variant=\"h5\"\n                    component=\"h3\"\n                >\n                    {item.title}\n                </Typography>\n                <IconButton\n                    className=\"delete-item-btn\"\n                    data-item-id={item.id}\n                    onClick={onDeleteItem}\n                    aria-label=\"Delete\"\n                    color=\"secondary\"\n                >\n                    <DeleteIcon />\n                </IconButton>\n                <List>\n                    <ListItem button onClick={this.handleClick}>\n                        <ListItemText primary=\"Comments\" />\n                        {open ? <ExpandLess /> : <ExpandMore />}\n                    </ListItem>\n                    <Collapse in={open} timeout=\"auto\" unmountOnExit>\n                        <List>\n                            {map(item.comments, comment => (\n                                <div\n                                    key={uuidv1()}\n                                    className=\"comments-container\"\n                                >\n                                    <Comment comment={comment} />\n                                    <Divider />\n                                </div>\n                            ))}\n                            <ListItem>\n                                <TextField\n                                    autoFocus\n                                    value={newComment}\n                                    onChange={this.handleChangeNewComment}\n                                    label=\"New comment title...\"\n                                />\n                                <Fab\n                                    color=\"primary\"\n                                    title=\"Add new comment\"\n                                    size=\"small\"\n                                    aria-label=\"Add\"\n                                >\n                                    <AddIcon\n                                        data-item-id={item.id}\n                                        onClick={this.handleAddNewComment}\n                                    />\n                                </Fab>\n                            </ListItem>\n                        </List>\n                    </Collapse>\n                </List>\n            </Paper>\n        );\n    }\n}\n","import React, {Component} from 'react';\nimport {filter, map} from 'lodash';\nimport uuidv1 from 'uuid/v1';\nimport Item from './Item';\nimport {updateLSData, getLSData} from '../utils';\nimport TextField from '@material-ui/core/TextField';\nimport Fab from '@material-ui/core/Fab';\nimport AddIcon from '@material-ui/icons/Add';\nimport './App.css';\n\nclass App extends Component {\n    state = {\n        data: [],\n        itemTitle: ''\n    };\n\n    componentDidMount() {\n        this.refreshState();\n    }\n\n    handleChangeItemTitle = event => {\n        const {\n            target: {value}\n        } = event;\n        this.setState({itemTitle: value});\n    };\n\n    handleAddItem = () => {\n        const {data, itemTitle} = this.state;\n        if (itemTitle) {\n            const updatedData = [\n                ...data,\n                {id: uuidv1(), title: itemTitle, comments: []}\n            ];\n            this.setState({data: updatedData, itemTitle: ''}, () =>\n                updateLSData(updatedData)\n            );\n        }\n    };\n\n    handleDeleteItem = event => {\n        const {data} = this.state;\n        const {\n            currentTarget: {\n                dataset: {itemId}\n            }\n        } = event;\n        const updatedData = filter(data, item => item.id !== itemId);\n        this.setState({data: updatedData}, () => updateLSData(updatedData));\n    };\n\n    refreshState = () => this.setState({data: getLSData() ? getLSData() : []});\n\n    render() {\n        const {data, itemTitle} = this.state;\n        return (\n            <div>\n                <div className=\"new-item-container\">\n                    <TextField\n                        autoFocus\n                        value={itemTitle}\n                        onChange={this.handleChangeItemTitle}\n                        label=\"New item title...\"\n                    />\n                    <Fab\n                        color=\"primary\"\n                        title=\"Add new item\"\n                        size=\"small\"\n                        aria-label=\"Add\"\n                    >\n                        <AddIcon onClick={this.handleAddItem} />\n                    </Fab>\n                </div>\n                <section className=\"container-items\">\n                    {map(data, item => (\n                        <Item\n                            refreshState={this.refreshState}\n                            key={item.id}\n                            item={item}\n                            onDeleteItem={this.handleDeleteItem}\n                        />\n                    ))}\n                </section>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}